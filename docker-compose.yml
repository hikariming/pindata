version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile # 假设 backend 目录下有 Dockerfile
    container_name: llama_backend_service
    # command: gunicorn --bind 0.0.0.0:5000 run:app # 生产环境启动命令
    command: python run.py # 开发环境启动命令 (如果 run.py 中 app.run debug=True)
    volumes:
      - ./backend:/app # 挂载后端代码以实现热重载
      # - ./plugins:/app/plugins_custom # 挂载自定义插件目录到后端容器内
    ports:
      - "${FLASK_RUN_PORT:-5000}:5000" # 从 .env 读取端口
    environment:
      # 从 .env 文件或直接在此处定义环境变量
      - FLASK_APP=${FLASK_APP}
      - FLASK_ENV=${FLASK_ENV}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL} # 连接到下面的 db 服务
      - MINIO_ENDPOINT=${COMPOSE_MINIO_SERVICE_NAME:-minio}:9000 # MinIO 服务名
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} # 与 .env 中后端使用的 MinIO key 一致
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_SECURE=${MINIO_SECURE}
      - MINIO_DEFAULT_BUCKET=${MINIO_DEFAULT_BUCKET}
      - CELERY_BROKER_URL=redis://${COMPOSE_REDIS_SERVICE_NAME:-redis}:6379/0
      - CELERY_RESULT_BACKEND=redis://${COMPOSE_REDIS_SERVICE_NAME:-redis}:6379/0
      - PYTHONUNBUFFERED=1 # 确保 Python 输出立即显示在 Docker 日志中
    depends_on:
      - db
      - minio
      - redis
    networks:
      - llama_network

  # 前端服务 (如果需要)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile # 假设 frontend 目录下有 Dockerfile
  #   container_name: llama_frontend_service
  #   volumes:
  #     - ./frontend/src:/app/src # 热重载
  #   ports:
  #     - "${REACT_APP_PORT:-3000}:3000"
  #   environment:
  #     - REACT_APP_API_BASE_URL=http://backend:5000/api # 后端服务名
  #   depends_on:
  #     - backend
  #   networks:
  #     - llama_network

  db:
    image: postgres:13-alpine
    container_name: ${COMPOSE_DB_SERVICE_NAME:-llama_postgres_db}
    environment:
      POSTGRES_USER: ${COMPOSE_POSTGRES_USER} # 从 .env 读取
      POSTGRES_PASSWORD: ${COMPOSE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${COMPOSE_POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql # 可选：用于初始化数据库的脚本
    ports:
      - "${COMPOSE_POSTGRES_PORT:-54320}:5432" # 映射到主机的非标准端口，避免冲突
    restart: unless-stopped
    networks:
      - llama_network

  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: ${COMPOSE_MINIO_SERVICE_NAME:-llama_minio_storage}
    environment:
      MINIO_ROOT_USER: ${COMPOSE_MINIO_ROOT_USER} # 从 .env 读取
      MINIO_ROOT_PASSWORD: ${COMPOSE_MINIO_ROOT_PASSWORD}
    ports:
      - "${COMPOSE_MINIO_PORT:-9000}:9000"          # API 端口
      - "${COMPOSE_MINIO_CONSOLE_PORT:-9001}:9001"  # 控制台端口
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - llama_network

  redis:
    image: redis:6.2-alpine
    container_name: ${COMPOSE_REDIS_SERVICE_NAME:-llama_redis_cache}
    ports:
      - "${COMPOSE_REDIS_PORT:-63790}:6379" # 映射到主机的非标准端口
    restart: unless-stopped
    networks:
      - llama_network

  # Celery worker (如果需要异步任务)
  # celery_worker:
  #   build:
  #     context: ./backend # 与 backend 使用相同的构建上下文和 Dockerfile
  #   container_name: llama_celery_worker
  #   command: celery -A app.tasks.celery_app worker -l info # 假设 celery_app 在 app.tasks 中
  #   volumes:
  #     - ./backend:/app
  #   environment:
  #     - FLASK_ENV=${FLASK_ENV}
  #     - SECRET_KEY=${SECRET_KEY}
  #     - DATABASE_URL=${DATABASE_URL}
  #     - MINIO_ENDPOINT=${COMPOSE_MINIO_SERVICE_NAME:-minio}:9000
  #     - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
  #     - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
  #     - CELERY_BROKER_URL=redis://${COMPOSE_REDIS_SERVICE_NAME:-redis}:6379/0
  #     - CELERY_RESULT_BACKEND=redis://${COMPOSE_REDIS_SERVICE_NAME:-redis}:6379/0
  #     - PYTHONUNBUFFERED=1
  #   depends_on:
  #     - backend # 确保应用代码和配置已就绪
  #     - redis
  #     - db      # 如果任务需要访问数据库
  #   networks:
  #     - llama_network

volumes:
  postgres_data:
  minio_data:

networks:
  llama_network:
    driver: bridge

# 要启动所有服务: docker-compose up -d
# 要停止所有服务: docker-compose down
# 要查看日志: docker-compose logs -f [service_name]
# 环境变量 (${VAR_NAME}) 会从当前环境或项目根目录的 .env 文件中读取。 